************************************ Luna **************************************
Luna aims to be a header-only library of numerical routines written in C++.

*** Basic specification ***
1. Simple build process - a library is built for use with examples (tests).
2. Library header files should be easy to read and well documented (Doxygen).
3. Code should be kept minimal and simple (try and keep functions short).
4. Library should be easy to download and use (minimal number of dependencies).
5. Code will comply to the C++11 standard.
6. Error checking is important (messages should be helpful).
7. All examples should be well documented with maths specified well.
8. Native implementation of methods that doesn't depend on external libraries.
9. The Eigen library will also be used for performance improvements.
10. Code should use parallelisation wherever applicable to improve performance.

***** Class/File list *****
--- Core ---
1.  Error - error handling and reports                                       [x]
2.  Vector - a generic vector class for use with numeric types               [x]
3.  Timer - a simple timer class for timing methods                          [x]
4.  Matrix - a generic matrix class (including linear algebra methods)       [x]
5.  Mesh1D - a one-dimensional mesh class (including numerical integration)  [x]
6.  Mesh2D - a two-dimensional mesh class                                    [x]
7.  Special - special mathematical functions not contained in std library     []
8.  Polynomial - a class for solving and evaluating polynomials              [x]
9.  Residual - a class for defining residual objects (used with Newton)      [x]
10. Newton - a Newton's method iteration class                               [x]
11. Arclength - arc length continuation class                                [x]
12. Interpolate - interpolation methods for 1D and 2D mesh objects (utility)  []
13. MonteCarlo - a class for utilising Monte Carlo methods  		              []
14. Quadrature - Numerical integration of functions  			                    []
15. Utility - General utility functions 				                              []

--- Sparse ---
1. Tridiagonal - a tridiagonal matrix class (including solver)    	         [x]
2. BandedMatrix - a banded matrix class (including banded solver)            [x]
3. SparseMatrix - a sparse matrix class (including sparse linear algebra)    [x]  
    -> biconjugate gradient method? ( linbcg.h ) + parallel multiplication/solve
4. Triplet - a class of 3-tuples for use with SparseMatrix		               [x]

--- Eigenvalue ---
1. Eigensystem - a class for solving linear eigensystems                     [?]
2. SparseEigensystem - a class for solving sparse linear eigensystems         []

--- ODE ---
1. ODE_BVP - ODE boundary value problem solver class                         [x]
2. ODE_IVP - ODE intial value problem solver class                            []
3. Equation - class for specifying the ODE equation                          [x]
4. Residual_with_coords - Residual object with an independent variable	     [x]
5. Equation_1matrix - Equation with added matrix for complicated equations   [x]	  	

--- PDE ---
1. PDE_IBVP - PDE initial boundary value problem class                        []
2. Poisson - a class for solving Poisson problems                             []

--- Automatic-differentiation ---
1. Dual - a class defining dual numbers                                       []
2. Dual_math - a class for math functions for use with dual numbers           []
3. Autodiff - a class for automatic-differentiation                           []

--- Quaternions ---
1. Quaternion - a class defining quaternions				                          []

--- Spectral ---
1. Basis - a base class defining basis functions to be inherited             [x]
2. Chebyshev - a class defining Chebyshev polynomials (inherit from basis)	 [x]
3. Spectral - a class defining spectral solutions (basis + coefficients)     [x]
4. solve method in ODE_BVP for solving using spectral methods                 []
5. solve PDEs using spectral method                                           []
6. Fourier - a class defining a Fourier basis (inherit from basis)            []
7. method in Vector to create collocation points                              []
8. solve eigenvalue problems using spectral method                            []



***** Examples *****
Examples should be used both to test the functionality of the code and
demonstrate how the code can be used.

1. Vector_algebra - test Vector and Error (range check) +,-,*,/,dot,norms    [x]
2. Linear_system - test Matrix and Timer classes               		           [x]
3. Integration - test Mesh1D, Mesh2D, Special and Quadrature classes          []
4. Root_finding - test Polynomial, Newton and Residual classes               [x]
5. Heat_equation - test Tridiagonal					                                 [x]
6. Laplace_equation - test SparseMatrix + Triplets			                     [x]
7. Nonlinear_ODE_BVP - test ODE_BVP and BandedMatrix (inside ODE_BVP)	       [x]
8. Arclength_Falkner - test arclength solving in ODE_BVP                      []
9. Spectral_ODE_BVP - test Spectral and Chebyshev                             []
10. Spectral_ODE_Periodic - test Fourier basis                                [] ??? Better name ???
11. Spectral_ODE_Rational - test RationalChebyshev basis                      [] ??? Better name ???
12. Spectral_Poisson - test PDE solution using spectral methods               [] 

***** General TODO *****
1. Cholesky decomposition - Hermitian Matrices (or just real symmetric?)	
2. Spectral methods? - Fourier, Chebyshev, collocation? 	


ODE_IVP example - Lorenz equations with python plots, parameter variation and 
sensitivity to initial conditions etc

The C++17 standard includes parallel algorithms. This hasn't been implemented
in GCC yet but when GCC 9 is released it will include Intel's parallel 
algorithm implementation. I'm not sure when GCC 9 will be released but I should
check periodically. 

Need to use -std=c++17 flag in SConstruct and include <execution> in files
then reimplement lots of the functions in Vector and Matrix to use parallel
processing. I also need to test if the parallel versions actually produce 
improvements or not. 

